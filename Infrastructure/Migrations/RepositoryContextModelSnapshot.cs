// <auto-generated />
using System;
using BudgetApp.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BudgetApp.Infrastructure.Migrations
{
    [DbContext(typeof(RepositoryContext))]
    partial class RepositoryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BudgetApp.Domain.Models.Budget", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("BudgetId");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.ToTable("Budgets");

                    b.HasData(
                        new
                        {
                            Id = new Guid("6fd88047-f440-4d32-89b9-fd472b2bb5bc"),
                            EndDate = new DateTime(2024, 9, 27, 1, 37, 52, 800, DateTimeKind.Utc).AddTicks(3628),
                            Name = "Monthly Budget",
                            StartDate = new DateTime(2024, 8, 27, 1, 37, 52, 800, DateTimeKind.Utc).AddTicks(3628),
                            TotalAmount = 2000m
                        });
                });

            modelBuilder.Entity("BudgetApp.Domain.Models.BudgetCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("BudgetCategoryId");

                    b.Property<decimal>("AllocatedAmount")
                        .HasColumnType("numeric");

                    b.Property<Guid>("BudgetId")
                        .HasColumnType("uuid");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BudgetId");

                    b.ToTable("BudgetCategories");
                });

            modelBuilder.Entity("BudgetApp.Domain.Models.Transaction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("TransactionId");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasMaxLength(60)
                        .HasColumnType("character varying(60)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Transactions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("1c19ee4b-0d1a-4aed-84cb-7543ca065eff"),
                            Amount = 1000m,
                            Category = "Salary",
                            Description = "Monthly salary",
                            TransactionDate = new DateTime(2024, 7, 27, 1, 37, 52, 800, DateTimeKind.Utc).AddTicks(3765),
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("9ef9bd57-831e-4e92-8f88-f440c303313d"),
                            Amount = 200m,
                            Category = "Groceries",
                            Description = "Weekly groceries",
                            TransactionDate = new DateTime(2024, 8, 17, 1, 37, 52, 800, DateTimeKind.Utc).AddTicks(3770),
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("e82c3eac-09cf-4596-9565-c748e2fc210b"),
                            Amount = 50m,
                            Category = "Entertainment",
                            Description = "Movie night",
                            TransactionDate = new DateTime(2024, 8, 22, 1, 37, 52, 800, DateTimeKind.Utc).AddTicks(3782),
                            Type = 1
                        });
                });

            modelBuilder.Entity("BudgetApp.Domain.Models.BudgetCategory", b =>
                {
                    b.HasOne("BudgetApp.Domain.Models.Budget", null)
                        .WithMany("Categories")
                        .HasForeignKey("BudgetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BudgetApp.Domain.Models.Budget", b =>
                {
                    b.Navigation("Categories");
                });
#pragma warning restore 612, 618
        }
    }
}
